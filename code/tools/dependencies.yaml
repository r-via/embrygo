# Pyt-Patrol Dependency Configuration File
# ----------------------------------------
# This file defines the dependencies to be checked and managed by Pyt-Patrol.
# It is intended to be placed in the directory specified by Pyt-Patrol's
# '--context-dir' option (e.g., the 'tools/' directory of your project).
#
# Path Resolution:
# - Paths starting with '~' are expanded to the user's home directory.
# - Absolute paths (e.g., /usr/bin/tool) are used as-is.
# - All other paths for 'path_to_check', 'requirements_file', and 'venv_name'
#   are resolved relative to the '--context-dir' provided to Pyt-Patrol.
#
# Pyt-Patrol will look for a file named 'dependencies.yaml' in the
# --context-dir by default, or you can specify a different file with --config.

core_system_tools:
  - name: "Go Compiler (System)"
    type: "executable_version_check"
    executable_name: "go"
    check_command_version: "go version"
    version_regex: "go(?: version go)?(\\d+\\.\\d+(?:\\.\\d+)?(?:[a-zA-Z0-9.-]+)?)"
    min_version: "1.21"
    not_found_message: "Go executable ('go') not found in PATH."
    install_suggestion: "Please install Go (e.g., from https://golang.org/dl/) and ensure it's in your PATH."

  - name: "NVM (Node Version Manager)"
    type: "file_exists_check"
    path_to_check: "~/.nvm/nvm.sh"
    not_found_message: "NVM installation script ('~/.nvm/nvm.sh') not found."
    install_suggestion: "Install NVM from https://github.com/nvm-sh/nvm."

  - name: "System Python 3 (for venv creation)"
    type: "python_capabilities_check"
    executable_name: "python3"
    check_command_version: "python3 --version"
    version_regex: "Python (\\d+\\.\\d+(?:\\.\\d+)?)"
    min_version: "3.8"
    not_found_message: "System Python 3 ('python3') not found in PATH."
    install_suggestion: "Please install Python 3.8+ and ensure 'python3' is in your PATH. This is needed to create the project's virtual environment."

  - name: "Git SCM"
    type: "executable_version_check"
    executable_name: "git"
    check_command_version: "git --version"
    version_regex: "git version (\\d+\\.\\d+\\.\\d+)"
    not_found_message: "Git executable ('git') not found in PATH."
    install_suggestion: "Please install Git (e.g., via your system package manager or from https://git-scm.com/downloads)."

go_language_tools:
  - name: "Templ CLI (Go HTML Templating)"
    type: "go_tool_install_check"
    executable_name: "templ"
    install_package: "github.com/a-h/templ/cmd/templ@latest"
    check_command_version: "templ version"
    version_regex: "templ version (v\\d+\\.\\d+\\.\\d+)"
    help_url: "https://templ.guide/installation"
    not_found_message: "Templ CLI ('templ') not found in PATH."
    install_suggestion: "Run Pyt-Patrol with '--setup', or install manually: 'go install github.com/a-h/templ/cmd/templ@latest'. Ensure $GOBIN or $GOPATH/bin is in your system PATH."

  - name: "Air CLI (Go Live Reload)"
    type: "go_tool_install_check"
    executable_name: "air"
    install_package: "github.com/cosmtrek/air@latest"
    check_command_version: "air -v"
    version_regex: "air version (v[\\d\\.]+)"
    help_url: "https://github.com/cosmtrek/air"
    not_found_message: "Air CLI ('air') not found in PATH."
    install_suggestion: "Run Pyt-Patrol with '--setup', or install manually: 'go install github.com/cosmtrek/air@latest'. Ensure $GOBIN or $GOPATH/bin is in your system PATH."

node_frontend_tools:
  - name: "Node.js (provides npm & npx)"
    type: "executable_version_check"
    executable_name: "node"
    check_command_version: "node --version"
    version_regex: "v(\\d+\\.\\d+\\.\\d+)"
    min_version: "18.0.0"
    not_found_message: "Node.js is not installed or not in system PATH."
    install_suggestion: "Install Node.js (which includes npm and npx) from https://nodejs.org/ or via a version manager like NVM."

  - name: "TailwindCSS CLI"
    type: "node_tool_check"
    check_command_for_npx: "tailwindcss --version"
    npm_package_name: "tailwindcss"
    version_regex: "tailwindcss v([\\d\\.]+)"
    install_suggestion: "Ensure 'tailwindcss' is in 'package.json' (in --context-dir, e.g., ./tools/package.json) and run 'npm install' there."

  - name: "esbuild (Global - for BlitzKit JS minification)"
    type: "executable_version_check"
    executable_name: "esbuild"
    check_command_version: "esbuild --version"
    version_regex: "(\\d+\\.\\d+\\.\\d+)"
    not_found_message: "esbuild executable not found in system PATH. BlitzKit will use a fallback JS minifier, but esbuild is recommended for performance."
    install_suggestion: "Install esbuild globally for optimal JS minification by BlitzKit: 'npm install -g esbuild'."

python_virtual_environment:
  - name: "Project Python Venv Directory (in --context-dir)"
    type: "python_venv_create"
    venv_name: ".venv-embrygo"

  - name: "Project Requirements File (in --context-dir)"
    type: "file_exists_check"
    path_to_check: "requirements.txt"
    not_found_message: "Python requirements file ('requirements.txt') not found in the context directory."
    install_suggestion: "Ensure 'requirements.txt' exists in your context directory (e.g., ./tools/)."

  - name: "Venv Packages (from requirements.txt in --context-dir)"
    type: "python_venv_pip_install"
    requirements_file: "requirements.txt"
    install_suggestion: "Failed to install venv packages. Check 'requirements.txt' (in context directory) and venv health. Run Pyt-Patrol with '--setup'."

  - name: "templ-heroicons-generator (Python Pkg in Venv)"
    type: "python_venv_pkg_script_check"
    package_name: "templ-heroicons-generator"
    script_name: "templ-heroicons-generator"
    install_suggestion: "Ensure 'templ-heroicons-generator' is in your 'requirements.txt' (in --context-dir) and run Pyt-Patrol with '--setup'."
    not_found_message: "Package 'templ-heroicons-generator' or its script 'templ-heroicons-generator' not found in the venv."